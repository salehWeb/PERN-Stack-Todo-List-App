type Comment {
  comment: String
  created_at: DateTime
  id: ID!
  post: Post
    @materializer(
      query: "getPost"
      arguments: [{ name: "id", field: "post_id" }]
    )
  post_id: ID
  update_at: DateTime
  userName: String
}

type Likes {
  id: ID!
  like: Boolean
  post: Post
    @materializer(
      query: "getPost"
      arguments: [{ name: "id", field: "post_id" }]
    )
  post_id: ID
  userName: String
}

type Post {
  body: String
  commentList: [Comment] @materializer(query: "getCommentUsingPost_id")
  created_at: DateTime
  id: ID!
  image: String
  likesList: [Likes] @materializer(query: "getLikesUsingPost_id")
  title: String
  update_at: DateTime
  userName: String
}

"""
These are some examples of queries generated from the schema. Feel free to modify them or add your own.
"""
type Query {
  getCommentList: [Comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      configuration: "postgresql_config"
    )
  getComment(id: ID!): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      configuration: "postgresql_config"
    )
  getLikesList: [Likes]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "likes"
      configuration: "postgresql_config"
    )
  getLikes(id: ID!): Likes
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "likes"
      configuration: "postgresql_config"
    )
  getPostList: [Post]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      configuration: "postgresql_config"
    )
  getPost(id: ID!): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      configuration: "postgresql_config"
    )
  getCommentUsingPost_id(id: ID!): [Comment]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT T."comment", T."created_at", T."id", T."post_id", T."update_at", T."userName"
        FROM "public"."comment" T
        WHERE T."post_id" = $1
      """
      configuration: "postgresql_config"
    )
  getLikesUsingPost_id(id: ID!): [Likes]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT T."id", T."like", T."post_id", T."userName"
        FROM "public"."likes" T
        WHERE T."post_id" = $1
      """
      configuration: "postgresql_config"
    )
}

"""
These are some examples of mutations generated from the schema. Feel free to modify them or add your own.
"""
type Mutation {
  insertComment(
    post_id: ID!
    created_at: DateTime!
    comment: String!
    update_at: DateTime!
    userName: String!
  ): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      dml: INSERT
      configuration: "postgresql_config"
    )
  deleteComment(id: ID!): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertLikes(userName: String!, post_id: ID!, like: Boolean!): Likes
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "likes"
      dml: INSERT
      configuration: "postgresql_config"
    )
  deleteLikes(id: ID!): Likes
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "likes"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertPost(
    image: String!
    created_at: DateTime!
    body: String!
    update_at: DateTime!
    title: String!
    userName: String!
  ): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      dml: INSERT
      configuration: "postgresql_config"
    )
  deletePost(id: ID!): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      dml: DELETE
      configuration: "postgresql_config"
    )
}
